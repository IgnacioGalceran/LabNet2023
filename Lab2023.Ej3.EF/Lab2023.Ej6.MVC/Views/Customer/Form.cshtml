@model Lab2023.Ej3.EF.Logic.DTO.CustomersDTO
@{
    ViewBag.Title = "Customer Page";
}

@{
    string formTitle = Model.CustomerID != null ? "actualización" : "creación";
}

<h1 class="form-title">Formulario de @formTitle de Clientes</h1>

<div class="form-container">
    @if (string.IsNullOrEmpty(Model.CustomerID))
    {
        using (Html.BeginForm("InsertCustomer", "Customer", FormMethod.Post, new { id = "insertForm" }))
        {
            <div class="form-group">
                @Html.LabelFor(model => model.ContactName, "Nombre del cliente", new { @class = "control-label" })
                @Html.TextBoxFor(model => model.ContactName, new { @class = "form-control contact-name", placeholder = "Ingrese el nombre" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CompanyName, "Nombre de Compañía", new { @class = "control-label" })
                @Html.TextBoxFor(model => model.CompanyName, new { @class = "form-control company-name", placeholder = "Ingrese la compañía" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.City, "Ciudad del cliente", new { @class = "control-label" })
                @Html.TextBoxFor(model => model.City, new { @class = "form-control customer-city", placeholder = "Ingrese la ciudad" })
            </div>

            <button type="button" class="btn mt-2 btn-primary" onclick="insertCustomer()">Agregar</button>
        }
    }
    else
    {
        using (Html.BeginForm("UpdateCustomer", "Customer", FormMethod.Post, new { id = "updateForm" }))
        {
            @Html.HiddenFor(model => model.CustomerID, new { @class = "customer-id" })

            <div class="form-group">
                @Html.LabelFor(model => model.ContactName, "Nombre del cliente", new { @class = "control-label" })
                @Html.TextBoxFor(model => model.ContactName, new { @class = "form-control contact-name", placeholder = "Ingrese el nombre" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CompanyName, "Nombre de Compañía", new { @class = "control-label" })
                @Html.TextBoxFor(model => model.CompanyName, new { @class = "form-control company-name", placeholder = "Ingrese la compañía" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.City, "Ciudad del cliente", new { @class = "control-label" })
                @Html.TextBoxFor(model => model.City, new { @class = "form-control customer-city", placeholder = "Ingrese la ciudad" })
            </div>

            <button type="button" class="btn mt-2 btn-primary" onclick="updateCustomer()">Actualizar</button>
        }
    }
</div>

@section Scripts{
    <script type="text/javascript" charset="utf-8">

        function insertCustomer() {
            var contactName = $(".contact-name").val();
            var companyName = $(".company-name").val();
            var city = $(".customer-city").val();

            var customerData = {
                ContactName: contactName,
                CompanyName: companyName,
                City: city
            };

            if (!validateFields(contactName, companyName, city)) {
                return;
            }

            Swal.fire({
                title: 'Confirmar?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Si, agregar!'
            }).then((result) => {
                if (result.isConfirmed) {
                    confirmAction(false, customerData);
                }
            });
        }

        function updateCustomer() {
            var contactName = $(".contact-name").val();
            var companyName = $(".company-name").val();
            var city = $(".customer-city").val();
            var idCustomer = $(".customer-id").val();

            var customerData = {
                ContactName: contactName,
                CompanyName: companyName,
                City: city,
                CustomerID: idCustomer
            };

            if (!validateFields(contactName, companyName, city)) {
                return;
            }

            Swal.fire({
                title: 'Confirmar?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Si, actualizar!'
            }).then((result) => {
                if (result.isConfirmed) {
                    confirmAction(true, customerData);
                }
            });
        }

        function confirmAction(isUpdate, customerData) {
            var url = isUpdate ? '@Url.Action("UpdateCustomer", "Customer")' : '@Url.Action("InsertCustomer", "Customer")';
            $.ajax({
                url: url,
                type: 'POST',
                data: JSON.stringify(customerData),
                contentType: 'application/json',
                success: function (data) {
                    if (data.result) {
                        var message = isUpdate ? 'actualizado' : 'agregado';
                        Swal.fire(
                            'Operación exitosa!',
                            'El cliente ha sido ' + message + '.',
                            'success'
                        ).then(() => {
                            window.location.href = '/Customer';
                        });
                    } else if (!data.error) {
                        var message = isUpdate ? 'No hubo cambios en el cliente' : 'No se pudo agregar el cliente';
                        Swal.fire(
                            'Error!',
                            message,
                            'error'
                        );
                    } else {
                        Swal.fire(
                            'Error!',
                            data.message,
                            'error'
                        );
                    }
                },
                error: function (xhr, textStatus, errorThrown) {
                    Swal.fire(
                        'Error!',
                        textStatus,
                        'error'
                    );
                }
            });
        }

        function validateFields(contactName, companyName, city) {
 
            if (contactName.trim() === "" || !/^[a-zA-ZáéíóúÁÉÍÓÚñÑ.\s]{1,40}$/.test(contactName)) {
                Swal.fire('Error', 'El nombre es obligatorio y debe contener como máximo 40 letras y espacios.', 'error');
                return false;
            }

            if (companyName.trim() === "" || !/^[a-zA-ZáéíóúÁÉÍÓÚñÑ.\s]{1,30}$/.test(companyName)) {
                Swal.fire('Error', 'El nombre de la compañía es obligatorio y debe como máximo 30 letras y espacios.', 'error');
                return false;
            }

            if (city.trim() === "" || !/^[a-zA-ZáéíóúÁÉÍÓÚñÑ.\s]{1,15}$/.test(city)) {
                Swal.fire('Error', 'La ciudad es obligatoria y debe contener como máximo 15 letras y espacios.', 'error');
                return false;
            }

            return true;
        }

    </script>
}





